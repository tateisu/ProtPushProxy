import java.util.regex.Matcher
import java.util.regex.Pattern

plugins {
    id "com.android.application"
    id "org.jetbrains.kotlin.android"
    id "org.jetbrains.kotlin.kapt"
}

android {
    namespace "jp.juggler.pushreceiverapp"
    compileSdk 33

    defaultConfig {
        applicationId "jp.juggler.pushreceiverapp"
        minSdk 26
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += [
                        "room.schemaLocation":"$projectDir/schemas".toString(),
                        "room.incremental":"true",
                        "room.expandProjection":"true"]
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
        }
    }
    // Specifies one flavor dimension.
    flavorDimensions "fcm"
    productFlavors {
        nofcm {
            dimension "fcm"
            // applicationIdSuffix ".demo"
            versionNameSuffix "-nofcm"
        }
        fcm {
            dimension "fcm"
            // applicationIdSuffix ".full"
            versionNameSuffix "-fcm"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
        coreLibraryDesugaringEnabled true
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
    viewBinding {
        enabled = true
    }
}

dependencies {
    api "androidx.appcompat:appcompat:$appcompatVersion"
    api "androidx.browser:browser:1.4.0"
    api "androidx.core:core-ktx:$coreKtxVersion"
    api "androidx.drawerlayout:drawerlayout:1.1.1"
    api "androidx.emoji2:emoji2-bundled:$emoji2Version"
    api "androidx.emoji2:emoji2-views-helper:$emoji2Version"
    api "androidx.emoji2:emoji2-views:$emoji2Version"
    api "androidx.emoji2:emoji2:$emoji2Version"
    api "androidx.exifinterface:exifinterface:1.3.5"
    api "androidx.lifecycle:lifecycle-common-java8:$lifecycleVersion"
    api "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycleVersion"
    api "androidx.lifecycle:lifecycle-process:$lifecycleVersion"
    api "androidx.lifecycle:lifecycle-reactivestreams-ktx:$lifecycleVersion"
    api "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycleVersion"
    api "androidx.lifecycle:lifecycle-service:$lifecycleVersion"
    api "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycleVersion"
    api "androidx.lifecycle:lifecycle-viewmodel-savedstate:$lifecycleVersion"
    api "androidx.recyclerview:recyclerview:1.2.1"
    api "androidx.room:room-ktx:$roomVersion"
    api "androidx.room:room-runtime:$roomVersion"
    api "androidx.startup:startup-runtime:$startupVersion"
    api "androidx.startup:startup-runtime:1.1.1"
    api "androidx.work:work-runtime-ktx:$workVersion"
    api "androidx.work:work-runtime:$workVersion"
    api "com.astuetz:pagerslidingtabstrip:1.0.1"
    api "com.caverock:androidsvg-aar:1.4"
    api "com.github.UnifiedPush:android-connector:2.1.1"
    api "com.github.bumptech.glide:glide:$glideVersion"
    api "com.github.hadilq:live-event:1.3.0"
    api "com.github.kenglxn.QRGen:android:2.5.0"
    api "com.github.omadahealth:swipy:1.2.3@aar"
    api "com.github.penfeizhou.android.animation:awebp:2.24.0"
    api "com.github.penfeizhou.android.animation:glide-plugin:2.24.0"
    api "com.github.woxthebox:draglistview:1.6.6"
    api "com.google.android.flexbox:flexbox:3.0.0"
    api "com.google.android.material:material:$materialVersion"
    api "com.google.firebase:firebase-messaging:23.1.1"
    api "com.otaliastudios:transcoder:0.10.4"
    api "com.squareup.okhttp3:okhttp-urlconnection:$okhttpVersion"
    api "com.squareup.okhttp3:okhttp:$okhttpVersion"
    api "commons-codec:commons-codec:1.15"
    api "org.bouncycastle:bcpkix-jdk15on:1.70"
    api "org.conscrypt:conscrypt-android:2.5.2"
    api "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
    api "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlinxCoroutinesVersion"
    api "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinxCoroutinesVersion"
    api "org.jetbrains.kotlinx:kotlinx-serialization-json:1.4.1"
    api "ru.gildor.coroutines:kotlin-coroutines-okhttp:1.0"
    api 'org.jetbrains.kotlinx:kotlinx-datetime:0.4.0'

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'

    fcmApi "com.google.firebase:firebase-messaging:23.1.1"
    fcmApi "org.jetbrains.kotlinx:kotlinx-coroutines-play-services:$kotlinxCoroutinesVersion"

    kapt "com.github.bumptech.glide:compiler:$glideVersion"
    kapt "androidx.room:room-compiler:$roomVersion"
    coreLibraryDesugaring "com.android.tools:desugar_jdk_libs:$desugarLibVersion"
}

def willApplyGoogleService() {
    Gradle gradle = getGradle()
    String tskReqStr = gradle.getStartParameter().getTaskRequests().toString()
    Matcher matcher

    matcher = Pattern.compile("(?:assemble|generate)", Pattern.CASE_INSENSITIVE).matcher(tskReqStr)
    if (!matcher.find()) {
        // not assemble or generate task.
        return false
    }

    matcher = Pattern.compile("(?:assemble|generate)fcm\\w+", Pattern.CASE_INSENSITIVE).matcher(tskReqStr)
    if (!matcher.find()) {
        println "willApplyGoogleService=false. $tskReqStr"
        return false
    } else {
        println "willApplyGoogleService=true. $tskReqStr"
        return true
    }
}

if (willApplyGoogleService()) apply plugin: "com.google.gms.google-services"
